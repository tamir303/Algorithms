void swap(int* a, int* b)
{
	// function gets two pointers and switch their values
	int temp = *a;
	*a = *b;
	*b = temp;
}

int partition(int arr[], int start, int end)
{
	// pivot - the element's index we partition the array around(always the first element in the array)
	// start - start pointer of the array
	// end - end pointer of the array
	// change - if the element is located on the right side of the array, we want to compare it to the left, 
	// if the element is located on the left side of the array, we want to compare it to the right.
	// we continue this process until we sort the entire array(left side - smaller than pivot, right side - equal or larger)
	// in general this is the function purpose
	if (start == end)
		return start;
	int change = 1;
	int pivot = start, start = start, end = end;
	while (start != end)
	{
		if (arr[pivot] < arr[end] && change)
		{
			end -= 1;
		}
		else if (arr[pivot] > arr[end] && change)
		{
			swap(&arr[pivot], &arr[end]);
			pivot = end;
			start += 1;
			change = 0;
		}
		else if (arr[pivot] > arr[start] && !change)
		{
			start += 1;
		}
		else if (arr[pivot] < arr[start] && !change)
		{
			swap(&arr[pivot], &arr[start]);
			pivot = start;
			end -= 1;
			change = 1;
		}
	}
	return pivot;
}

int findElementI(int arr[], int start, int end, int I)
{
	// p - the element's index we partition the array around
	// start - start pointer of the array
	// end - end pointer of the array
	int p = partition(arr, start, end);
	int small = p - start;
	if (small == I - 1)
		return arr[p];
	else if (small < I - 1)
		findElementI(arr, p + 1, end, I - 1 - small);
	else
		findElementI(arr, start, p - 1, I);
}

int findTheMissing(int arr[], int start, int end)
{
	// k - the element's index we partition the array around
	// start - start pointer of the array
	// end - end pointer of the array
	if (start <= end)
	{
		int k = partition(arr, start, end);
		if (arr[k] == k)
		{
			return findTheMissing(arr, k + 1, end);
		}
		else if (arr[k] > k)
		{
			return findTheMissing(arr, start, k - 1);
		}
		else
			return k;
	}
	else
		return end + 1;
}

/*
void main()
{
	int arr[N] = { 5,0,2,3,7,6,1 };
	int elementI = 5; // smallest I th element
	printf("smallest %d th element is: %d\n", elementI, findElementI(arr, 0, N - 1, elementI));
	printf("missing number is: %d", findTheMissing(arr, 0, N - 1));
}
*/
